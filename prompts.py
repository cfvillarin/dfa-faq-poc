from langchain_core.prompts import PromptTemplate

qe_prompt = PromptTemplate.from_template("""
I want to preprocess a query so that it contains only necessary information only. 
Remove any Personal Identifiable Information (PII) such as Name, Birthdays, or Passport Numbers.
If in another language like Tagalog, Translate it to English. 
REMOVE questions, greetings, and instructions unrelated to official business with the Department of Foreign Affairs.

# Example 1
Original Query: Hi, My name is Jane Doe. My passport number is PE1210432. I lost my passport when I was walking at the park. What should I do?
Preprocessed Query: "I lost my passport, what should I do?"

# Example 2
Original Query: Hi. I want to ask what are the requirements for applying for a passport? Thank you very much.
Preprocessed Query: "What are the requirements for applying for a passport?"

# Example 3
Original Query: Hi, Good Morning. Nawala ang aking passport. Ano ang kailangan kong gawin?
Preprocessed Query: "I lost my passport, what should I do?"

# Example 4
Original Query: What should I eat today?
Preprocessed Query: "No relevant question"                                     

Do the same for this last or final query. Return the Preprocessed Query only and nothing else (no comments at the end):
# Final Example
Original Query: ```{email_body}```
Preprocessed Query:""")

rag_prompt = PromptTemplate.from_template("""
You are a polite assistant for the Department of Foreign Affairs.
                                            
#Important Instruction: Answer the question only by quoting directly from the following: 
[Start of Context FAQs]{retrieved_docs}[End of Context FAQs]
                                            
QUESTION: `{extracted_query}` 
                                            
### Other Instructions: 
1. Answer must strictly be based on the context only. The question must almost exactly match the context FAQs. Quote directly from the context. 
2. Answer ony what was asked.
3. Just say 'I cannot answer your question.' if no answer from context. 
4. Please return strictly as plain text and not markdown format. 
5. The 'context' is internal, do not mention its existense in the answer, give an answer as if you are the source of information. 
6. Please give a detailed answer. Provide instructions or links that exist in the context if needed. 

Answer:
""")

keyword_prompt = PromptTemplate.from_template("""You have only one task. List down all the keywords a list from the following question: `{extracted_query}`
Return a list containing at most 3 items.
Example answer: ["Passport", "Lost", "Missing"]
Answer: """)

email_format_prompt = PromptTemplate.from_template("""You are an assistant for the Department of Foreign Affairs.
A citizen emailed the following: ```{email_body}```
The detected query is: ```{extracted_query}```
The AI-generated answer we generated is: ```{generated_answer}```
Construct the email for sending. This will be automatically sent so add a disclaimer saying that this is AI-generated, they could reply if unsatisfied or for further clarification.
AI-Generated Autoreply: 
""")

prompt = PromptTemplate.from_template("""You are a translation assistant. I will only give you one translation task, you will give the answer only and nothing else, and here it is:
Translate to english: ```{email_body}```:""")

in_scope_prompt = PromptTemplate.from_template("""Answer in only one word, either "Yes" or "No".

Is this question look like a legitimate question to a public helpdesk?
1/ ```Where is the DFA Office located?```. Answer: Yes
2/ ```What should I eat for dinner?```. Answer No
3/ ```{extracted_query}```. Answer: """)

prompt3 = PromptTemplate.from_template("""You only know about the following: ```{retrieved_docs}```, Answer the question by quoting directly from your knowledge: {extracted_query}. Answer ony what was asked. Answer: """)

satisfactory_prompt = PromptTemplate.from_template("""I will give you a question, context, and answer generated by a RAG application. 
Note: If the generated answer was a refusal, that is unsatisfactory. (i.e. If the answer is saying that it cannot answer the question, that counts as unsatisfactory.)

Question: ```{extracted_query}````
Generated-Answer: ```{generated_answer}```

Answer in only one word, either "Yes" or "No" (No follow up sentence).
Does the generated-answer satisfactorily answer the question?

Satisfactory: 
""")
